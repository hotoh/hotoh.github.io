2	组件规范
2.1	规范列表
2.1.1	(新增的)Gadget组件内部禁止出现$Page变量,页面交互使用event事件
Gadget命名规范采用bes-iot-*.gadget例如：bes-iot-simcardstatus.gadget
错误：partyInfo直接从$Page.fillingInfo.partyInfo.model里面获取，导致该组件的这段功能和资料完善页面强依赖，应该换成通过组件的入参传递
 
正确：
 
   
2.1.2	Gadget中controller统一定义在一个js文件中， 文件命名规则为gadgetName + '-controller.js'
错误：
 
正确：
 

2.1.3	Gadget内部元素涉及交互时必须加ID，ID需要拼接{{$Gadget.$Attrs.id}}
错误：
 
正确：
 
典型场景: 一个页面中多次引入某个gadget时, ID如果不拼接{{$Gadget.$Attrs.id}}可能导致ID错乱

2.1.4	Gadget与外部通信使用发事件的方式，发送事件需要拼接gadget的id，确保事件id唯一
2.1.5	Gadget组件接收页面发出的事件，不接收其它组件发出的事件(组件之间)
2.1.6	如果是拷贝已有gadget修改，gadget同名覆盖,注意路径(src\main\webapp\gadgets\ctz\**\*.gadget，定制gadget必须放入ctz目录下),并且全量定制
2.1.7	新增的.gadget文件里面禁止引入桩文件，历史的使用ng-if="$UEE.isDevModel"进行判断是否进行加载，避免性能浪费
2.1.0 遇到基线问题,直接迁移gadget到定制测修改
2.1.8	Gadget组件出参如果用于前台报文提交，则必须是报文对象子集
错误：组件的出参model完全前台自定义
 
正确：
 
 
2.1.9	Gadget与外部通信使用发事件的方式，发送事件需要拼接gadget的id，确保事件id唯一
错误：
 
正确：
 
典型场景: 一个页面中多次引入某个gadget时, ID如果不拼接{{$Gadget.$Attrs.id}}可能导致ID错乱
补充优秀实践
$Gadget.$Emit("$bes.artificial.offerlist.effectiveWayItemChange" + $Gadget.$Attrs.id, obj);

2.1.10	Gadget组件接收页面发出的事件，不接收其它组件发出的事件
组件之间的信息传递通过页面进行，避免组件之间强耦合
2.1.11	如果是拷贝已有gadget修改，gadget命名空间要能体现当前BP开发组，而不是直接加上-c标识，这种会导致多个组gadget冲突(不)
错误：
 
正确：
 
3	目录规范
3.1	目录层级大原则   
Sysmenu表中URL对应路径为：bes/ctz/iot/**/html/**.html
Gadget存放路径为：gadget/ctz/**/**.gadget
示例：
 
 
3.1.1	定制目录规范定制原理：
bes.custom.cars覆盖bes.cars
配置文件：IOT_Common\omni\component\src\main\resources\config\third\plat\uee\uee.web.properties
uee.gadgets.location=/bes/**/*.gadget;/gadgets/**/*.gadget;/gadgets/ctz/**/*.gadget;（该配置标识gadget覆盖逻辑，从后往前覆盖）
定制目录：
src\main\webapp\gadgets\ctz\**\*.gadget

注意：开发copy基线gadget，归档的静态资源路径跟基线gadget路径一致，导致容器加载存在概率性问题。定制包跟基线包都是部署在bes.custom.cars下的，如果静态资源路径再用同一个，无法保证定制gadget的优先级，既无法实现定制覆盖基线。
3.1.2	构代码推荐标准：
1，	前台关于页签的操作规范：
http://3ms.huawei.com/hi/group/2033417/wiki_4074699.html
打开Tab页	top.$BES.$Portal.tabpanel.createTabItem
打开Tab页	top.$BES.$Portal.tabpanel.createTabItemByConf
激活Tab页	top.$BES.$Portal.tabpanel.showTabItem
隐藏Tab页	top.$BES.$Portal.tabpanel.hideTabItem
刷新Tab页	top.$BES.$Portal.tabpanel.refreshTabItem
关闭指定Tab页	top.$BES.$Portal.tabpanel.closeTabItem
获取指定的Tab页对象	top.$BES.$Portal.tabpanel.getTabItem
获取当前所有打开的Tab页	top.$BES.$Portal.tabpanel.getAllTabItems
关闭所有打开的Tab页	top.$BES.$Portal.tabpanel.closeAllTabItem
关闭除指定Tab页以外的所有打开的Tab页	top.$BES.$Portal.tabpanel.closeAllTabItemExceptOne
关闭Tab页回调	onBesTabClose
注册打开Tab页之前的回调	top.regOpenTabCallback
注册关闭Tab页之前的回调	top.regCloseTabCallback
去注册打开Tab页之前的回调	top.deregOpenTabCallback
去注册关闭Tab页之前的回调	top.deregCloseTabCallback
 
3.2	注释规范
我们提倡尽可能多的写有效的注释，不必考虑注释可能会带来的文件体积变大。在运行态我们有多种手段消除由注释/空格/换行带来的文件体积变大的问题， 如js/css文件压缩，静态资源服务端通过gzip压缩等。
需要注意的是，html/css/js的注释方式是不同的，在合适的地方使用合适的注释方式。
3.2.1	通用规范
	一般情况下，源程序有效注释量必须在30％以上。
	新增代码文件，在文件头部写入文件注释。
	禁止出现 修改人、修改单号、需求编号等敏感信息
3.2.2	Html、gadget 注释规范
使用 <!-- -->
【示例】：

<!—这是一段合法的html注释-->
<div class=”test-header”>  
......
</div>

3.2.3	JavaScript 注释规范
注释位置
1）函数和方法：每个函数和方法都应该包含一个注释，描述其目的和用于完成任务所可能使用的算法，参数类型、参数可选择值、返回值；避免在一行代码或表达式的中间插入注释。
2）大段代码：用于完成单个任务的多行代码应该在前面填加描述任务的注释；
3）复杂的算法：在使用复杂算法的代码处添加注释，以便下次查阅代码时帮助理解。
注释规范 
/**
* @desc 封装查询列表套餐名称展示，多个套餐名称用 ， 逗号分隔
* @param offeringIDs
*/
有几个参数写几个@param
//单卡360查询 - 用户详单查询的页面新增“套餐”列 封装套餐名称方法
$Controller.besIotSinglecardcdr.wrapOfferingNames($Gadget.data.callDetailRecordList, offeringIDs);
 
代码块注释
块注释以”/**”开头或者”/*”开头，以” */”结尾,包含@description，@param
【示例】：
 
单行注释
函数内的单行注释，以”//” 开头。对代码的注释应放在其上方或右方（对单条语句的注释）相邻位置，不可放于下方，若放于上方则注释需与其上面的代码用空行隔开。
【示例】：
 
3.3	排版规范
1.	程序块要采用缩进风格编写，缩进的空格数为4个。
2.	较长的语句、表达式或参数（>120字符）要分成多行书写，长表达式要在低优先级操作符处划分新行，操作符放在新行之首，划分出的新行要进行适当的缩进，使排版整齐，语句可读。
3.	不允许把多个短语句写在一行中，即一行只写一条语句,结尾使用分号。
4.	对齐只使用空格键，不使用TAB键。
说明：以免用不同的编辑器阅读程序时，因TAB键所设置的空格数目不同而造成程序布局不整齐。
4	Html规范
4.1	显式申明doctype
在HTML的顶部显式申明doctype，指示浏览器触发标准模式，避免触发浏览器的Quirks模式。HTML5对doctype的申明更加友好， 建议在所有的HTML头部都显式申明该文档的doctype为HTML5
【示例】：
<!DOCTYPE html>

4.2	显式申明字符编码为 UTF-8
通过meta标签显式申明当前文档的编码格式。
【示例】：
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<meta "charset=UTF-8">

4.3	正确使用标签闭合
自定义标签一定要使用全闭合。 如：
【示例】：
<!-- 不推荐 -->
<uee:fire script=”test”/>
<!-- 推荐 -->
<uee:fire script=”test”></uee:fire>
void element标签不要闭合。
【示例】：
1.	<!--不推荐-->
2.	<br></br>
3.	<br/>
4.	<!--推荐-->
5.	<br>

4.4	自动检查 id作为HTML中element的标识，必须是唯一的
4.5	id中不要出现小数点“.”等其他特殊的字符
 id中如果出现小数点“.”等其他特殊的字符，会对使用jQuery选择器造成一些困扰。
4.6	不要使用<table>标签进行布局，<table>的嵌套层级应遵守最小原则
1.	table比其它html标记占更多的字节。(造成下载时间延迟,占用服务器更多流量资源)
2.	table会阻挡浏览器渲染引擎的渲染顺序。(会延迟页面的生成速度,让用户等待更久的时间)
3.	table里显示图片时需要你把单个、有逻辑性的图片切成多个图。(增加设计的复杂度,增加页面加载时间,增加http会话数)
4.	在某些浏览器中,table里的文字的拷贝会出现问题。(会让用户不悦)
5.	table会影响其内部的某些布局属性的生效(比如<td>里的元素的height:100%) (限制页面设计的自由性)
6.	一旦学了CSS的知识,你会发现使用table做页面布局会变得更麻烦。(先花时间学一些CSS知识,会省去你以后大量的时间)
7.	‘table对’对于页面布局来说,从语义上看是不正确的。(它描述的是表现,而不是内容)
8.	table代码会让阅读者抓狂。(不但无法利用CSS,而且会不知所云,尤其在进行页面改版或内容抽取的时候)
4.7	table一旦设计完成就变成死的,很难通过CSS让它展现新的面貌。避免空链接属性
空链接属性是指img、link、script、ifrrame元素的src或href属性被设置了，但是值却为空。如<img src=””>，这种标签浏览器依旧会以默认的规则去请求空地址。
4.8	不要在HTML中使用style属性
样式统一在css文件中维护，不允许在html中直接指定。
4.9	代码风格
4.9.1	语句显式以分号结尾
4.9.2	命名
普通变量统一以驼峰命名法命名，如myContent。
常量、枚举值全部大写，以_为连接符，如MAX_POP_SIZE。
boolean变量的命名以is开头，如isValid。
4.10	性能规范
4.10.1	使用var申明变量   
在申明一个局部变量时，显示使用var来申明，如果不使用的话，相当于申明了个全局的变量。
4.10.2	不用new方式定义数组，对象以及正则表达式
说明：字面量语法简单，直接，优雅，减少代码。
不推荐：
var  array = new Array();
var  obj = new Object();
var  reg = new RegExp();
推荐：
var  array = [];
var  obj = {};
var  reg = /…/;

4.10.3	单纯转化字符型数字时，推荐使用Number
不推荐：
var  str = "08";
var  num = parseInt(str);
推荐：
var  str = "08";
var  num = Number(str);
4.10.4	数字转化字符串时，使用""+提高效率
不推荐：
var  num = 8;
var  str = num.toString();
推荐：
//性能+”” > String() > toString()
var  num = 8;
var  str = num + ""

4.10.5	避免使用eval
当前我们支持的浏览器是IE11以上，chrome，firefox，从JSON转换的角度来看，已经原生支持JSON.parse()和JSON. Stringify()进行JSON的序列化与反序列化，无需通过eval完成。IOT目前多出地方使用到，今后使用需要注意。
4.10.6	尽量减少对大对象的深拷贝。
多次拷贝ie下很容易出现js加载缓慢的问题。
 
4.10.7	业务模型中自定义的前端辅助变量使用$开头
       在Scope上自定义的变量或者业务模型（如$Model.abc）上自定义的临时变量（不需要提交到后台的），请使用$开头，并建议首字母大写。 由于Angularjs自定义的变量，通常使用$开头，首字母小写，所以为了防止和Angularjs自定义的变量名称冲突，建议首字母大写。UEE前端模型往后台提交时，带有$开头的数据不会被提交到后台，这样可以减少传输数据的大小。
比如下面的代码：
<div ng-if="$ChildItem.showType == 'SINGLE_SEL'" oc-select
x-property="$ChildItem.newValue" x-items="$ChildItem.options"
class="form_control form_droplist">

这里，$ChildItem是业务数据模型，但showType是为了控制当前被迭代DOM样式而设置的前端辅助变量。由于showType没有必要往后台提交，可以将其命名改为$showType：
<div ng-if="$ChildItem.$showType == 'SINGLE_SEL'" oc-select
x-property="$ChildItem.newValue" x-items="$ChildItem.options"
class="form_control form_droplist">


4.11	可靠性规范
4.11.1	js代码不允许编译报错。 
通过js语法检查或者在浏览器console里面执行，可检查js是否正确。
4.11.2	js代码中不允许出现undefine 错误。
变量使用时需要判空。调用rest服务的onafter里面，接口返回值在使用之前，必选先做业务异常onerror处理。

4.11.3	使用ngBind防止页面打开时的闪烁
 浏览器和angularjs渲染页面需要消耗一点时间，如果这个时间很短，用户感觉不出；但是如果这个时间较长，用户在打开页面时就会看到没有被渲染过的页面。对于使用绑定的地方，用户将看到双大括号闪烁一下。为了防止页面打开时的闪烁，可以用ng-Bind来替代 {{}}绑定。

4.11.4	严禁使用new Date()方法获取时间，使用adutil.getNowDate()获取
4.12	定义css选择器时，优先使用id，其次使用class
4.13	不同css规则之间用空行隔开

/* 推荐*/
html {
background: #fff;
}

body {
margin: auto;
width: 50%;
}
4.14	属性值中使用单引号代替双引号
/* 不推荐 */
html {
font-family: "open sans", arial, sans-serif;
}
/* 推荐*/
html {
font-family: 'open sans', arial, sans-serif;
}
