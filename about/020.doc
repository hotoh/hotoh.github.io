1	通用规范
1.1	规范列表
1.1.1	影响页面加载的接口需要使用遮罩层，比如validateorder和createorder, 针对开启的遮罩，及时进行关闭，推荐在onafter方法的第一行进行关闭，并且Onerror方法中必须有遮罩关闭逻辑。原因：请求时长较长的情况下，容易引起操作员误解，以为系统没反应，并且再次触发该请求会报错的情况。
错误：在使用校验接口这种可能会花费1秒甚至更长时间的接口时，没有使用adutil.startLoading()打开遮罩层
 
正确： 如下图所示，在使用校验接口这种可能会花费1秒甚至更长时间的接口时，需要使用adutil.startLoading()打开遮罩层，接口调用完成后使用adutil.endLoading()关闭
 
1.1.2	前台JS中不要存在复杂业务逻辑编排，需要下沉到后台。前台的代码只需要调用服务，获取页面需要的数据即可，业务逻辑前端开发可在omni层书写bs.xml进行处理。原因：减少前端业务逻辑，提高代码执行效率，减少前端异步请求引发的错误。
1.1.3	JS中的$Controller命名采用小驼峰法,并且保证唯一性，例如：$Controller("besResourceSimcardsettings"，为了统一编码风格。
1.1.4	严禁404请求，针对自己的业务逻辑，F12在console中进行查看，确认无效请求，将对应的代码逻辑删除。
404无效请求会无谓浪费性能
错误： 

1.1.5	严禁401请求,新增加的页面以及fire请求,必须配置权限文件access.xml,auth.xml,公共请求评审通过放到bes.iot.common.ctz.access.xml、bes.bp.base.resource.auth.xml，不需要再次在各业务鉴权文件中进行配置
1.1.6	前端三种弹出框，分别为提示级别info，错误级别error，确认级别confirm。对于info、error级别的提示信息要句号结尾，confirm级别的要问号结尾，info对应弹框头部为提示，error框对应弹框为错误，confirm框对应弹框为确认，内容不推荐使用禁止等强烈语气的词语。
    
 
1.1.7	页面或组件gadget文字部分禁止使用{{}}，要使用ng-bind，原因：页面加载内容过多的时候非常容易出现闪屏。
错误：使用{{}}，在加载时会有闪屏现象
 
 
正确：
 

1.1.8	服务按需调用，提高性能，同一笔业务禁止接口重复调用，原因：确认重复调用的接口是否提供批量接口或者是否可以迁移到初始化方法中，提升系统系能。
错误：循环调用接口查询用户信息，应该换成批量接口
 
正确：
 
错误：订购某个商品，进入详情页后调用了三次查询商品详情接口，都是查询的当前主商品
 
又比如做某项业务时连续调用了五次查询用户详情的接口
 

1.1.9	简单字段级的校验，如长度、是否身份证号码，必须使用公共的方法,如果需要增加公共校验，方法开头必须做好功能注释，内容存放到common-validator.js,并且需要经过飞检专家评审
错误：如下面的校验，自己手写了，没有调用公共API
	 
正确：
IOT_Common_CTZ\omni\component.web\src\main\webapp\bes\ctz\iot\common\js\common-validator.js
<script src="resource.root/bes/ctz/iot/common/js/common-validator.js" type="text/javascript"></script>
	 
备注: 如果新业务场景暂无合适的
正确：
 

评审专家评估确定公共逻辑可提取到iot-util-extend.js
IOT_Common_CTZ\omni\component.web\src\main\webapp\bes\ctz\iot\common\js\iot-util-extend.js
 
1.1.10	保证注释一致性和正确性，原因：方便他人查看代码逻辑，定位问题等。
1.1.11	不在js中直接操作DOM，使用双向绑定，原因：angular js提供数据模型双向绑定的能力
对数组的循环禁止使用for..in方式，                                         
前台数组原型里面包含很多扩展方法，使用for..in循环会取到这些方法，导致代码逻辑不正确
错误：
 
 for-in循环在遍历对象的时候总是会去遍历该对象的原型链所有的属性，并且唯一阻止的方法是使用hasOwnProperty来判断，这给遍历增加了额外的压力。循环数组还是推荐for循环，并且在for循环开始时缓存数组长度。
http://3ms.huawei.com/km/blogs/details/5557881

正确：
在一个function里有一个each,在each里某种条件成立的话，就把这个function返回true或者false 
但是在each代码块内不能使用break和continue,要实现break和continue的功能的话，要使用其它的方式 
break        用return false; 
continue    用return ture; 

所以当我在each里想使用return true给这个function返回时，其实只是让each继续执行而以 
连each都没有中断，所以function也就不能return了 。
function methodone(){ 
   .... 
   $.each(array,function(){ 
     if(条件成立){ 
       return false/true;   // false=break; true:continue 
     } 
   }); 
.... 
}
Jquery中each遍历跳出和中断循环方式
http://3ms.huawei.com/km/groups/1001599/blogs/details/5645223
1.1.12	UEE gadget 是独立的、具有业务语义的自定义组件。可以理解为一个页面中的一个区块
1.1.13	使用ajax/syncFire的同步能力需要进过SE评审，系统中大部分场景不需要使用同步能力，                                                                原因：使用同步能力会降低系统性能，并且增加业务复杂性，推荐写到bs.xml中。
错误：
 
正确： 
备注: 极端场景下必须使用同步ajax场景, 经专家组评估同意后使用
var resp = syncFire('/bes/systemparamquerybo/querysysparamvalue', {"key": sysParamId});

1.1.14	修改页面元素id、或dom结构改变页面展现形态涉及修改用例的，及时通知自动化测试修改用例，                                       原因：自动化用例的编写依据页面的唯一id，并且按钮的Dom会配置到 sys_treasury_oper如果提交按钮的Dom ID改动了, 金库验证通过后, 页面无法实现自动提交，此问题家里无法验证，出问题就会暴露到生产环境

例如: 
 
1.1.15	时间获取统一使用adutil.getNowDate()方式，                                 原因：如果使用new Date(),则获取的是操作员的电脑时间，为了保持时间一致性，统一使用该方法获取服务器时间。
1.1.16	前台避免直接查询数据库、修改数据，如有相关需求要调用后台接口实现。也就是说在omni路径下的bs.xml文件中禁止出现对DB类型的ENTITY进行增加、删除、修改的操作，可以查询。
原因：如果前台修改了数据，同时又调用了后台的服务，那么前台和后台是两个事物，无法做到事物一致性，可能导致死锁。
1.1.17	浏览器最低要求使用IE11/Chrome54/56(Win7/Win10) 或 Chrome49(WinXP)最低分辨率: 1280*1024，目前显示器的分辨率都高于此分辨率，再低的情况页面样式会发生很大变化，影响美观。
1.1.18	新增或修改的代码在提交前使用DS或VS工具进行格式化，统一编码风格
1.1.19	使用ngIf阻止没有必要的渲染，uee：if性能损耗大、ng-show会继续加载相关逻辑，消耗不必要的性能。
错误：uee:if性能损耗较大
 
正确：建议使用ng-if
 

1.1.20	rest.xml、access.xml、auth.xml文件由前端调用方进行配置，原因：后端开发人员不清楚使用场景，容易导致遗漏。
1.1.21	前端禁止进行浮点运算，统一调用公共方法处理（adutil.addFloatWith2(arg1, arg2)）。
1.1.22	圈复杂度超过15层循环建议抽取出方法
一般来说，任何方法的圈复杂度都不应该大于10，这个值不是臆想出来的，而是规律总结出的一个合理数值，一旦当值超过25，就意味着这段代码非常复杂，换句话说，你一旦修改，无论修改前有无BUG，修改产生新的Bug几乎是不可避免的。
https://juejin.im/entry/5889796db123db16a34d6ac8

错误：三层for循环
 

正确：将部分循环抽取成方法，方便阅读
 
1.1.23	Img等标签来源中含有变量时使用ng-src
Img等标签来源中含有变量时{{}}，预编译后会发送一个404的错误请求Url，具体参考http://rnd-soa.huawei.com/uee/doc/guide/#/item/faq14

原因分析
src属性上有使用了变量表达式，例如代码： 
1.	<img src="/uee/doc/log.png">
2.	<img src="/uee/doc/log.png">
3.	 src="/uee/doc/log.png">
4.	<img src="{{$webapp}}/uee/doc/log.png">
非预编译不会出现问题，是因为该img所在uslx必须经过uee编译解析后才交给浏览器，此时{ { } }已经替换。
经过预编译后出现问题，是因为该标签被展开到body内所在dom中，浏览器先于UEE进行解析，导致发送一个错误的url。 
处理建议
使用resource.root代替$webapp，或使用ng-src，推荐使用前者： 
1.	<img src="resource.root/uee/doc/log.png">
2.	或
3.	<img ng-src="{{$Item.processImgUrl}}">
1.1.24	编码使用UTF-8编码格式
错误：编码格式不一致会导致中文全是乱码
 

1.1.25	CSS必须使用基线的，严禁新建CSS，严禁使用内联样式
通过工具扫描代码，如有不符合规范的，需要告警列出来进行整改

错误：严禁使用内联样式
 
1.1.26	页面中多个view引的controller统一放入html页面controller js文件中
错误：每个view都有独立的js文件
 
正确：所有的js全部放到bes-artifical-changebroadbandflow-controller.js
 
备注:
DS工具解析时需要确保所有的js都放在html对应的controller.js文件中
网络请求数减少能一定程度的提升Web体验.
1.1.27	html页面中加载的包含ID属性的ueeFire标签
DS工具需要根据ID找到对应的响应方法
错误：
 
正确：
 
1.1.28	自助渠道页面跳转链接拼装禁止使用resource.root，推荐使用$UEE.$Webapp
使用resource.root会导致页面的URL越来越长, 服务端截取URL上最后一个resource.root替换成””, 前面拼接应用文根/oc或/operator
错误：
 
	正确：
 
前端JS直接通过$UEE.$Webapp获取应用文根, 发送绝对路径, 减少服务端URL转换
 
 

1.1.29	页面中禁止使用console.log打印日志
错误：
 
1.1.30	前端调用后端服务查询的数据返回应放置到$Page.data.xxx或$Gadget.data.xxx，为了与页面的控制变量区分，进行分层管理，使的代码逻辑更清晰
1.1.31	html中禁止单独引入公共js中的js，只需要引用以下三个即可，common-validator.js根据业务需要来决定是否引入
resource.app/app.js(UEE)
resource.root/bes/omni/ext4telecom/telecom/js/common-header.js（omni公共）
resource.root/bes/iot/common/iot-common-header.js（IOT公共）
1.1.32	页面的ID命名要保证唯一性、可测性，ID的新增以及修改要通知自动化用例测试组。
可测试性五大法则：有ID，且ID值必须固定、有意义、不含特殊字符、全局唯一。
① 有ID：不在循环数据集合中的，需与用户交互的元素都应该包含ID属性。
② 固定：ID不能使用随机数(不包含数字)，保证每次进入页面加载出来的ID必须保持不变。
③ 有意义：ID的命名是可读的英文单词，见名知意。
④ 不含特殊字符：ID不能含中文字符、@等特殊字符，只能使用下划线、横线、小数点和英文字母组合。
⑤ 全局唯一：在一个页面中ID不能重复，符合W3C国际标准[6]。						对于ID的命名、修改及删除的要求如下：
（1）元素命名需尽量按照可测试性五大法则进行命名。
（2）命名尽量要用与控件用途相符的英文单词。
（3）ID值应与产品的版本号和本地语言无关，即不随版本号或者语言的变化而变化。
（4）代码归档转测试后，应尽量避免对之前的控件属性ID值进行删除或修改，如有必须要修改或删除的知会自动化组
1.1.33	前台展示多数据组合时，分隔符统一使用英文的逗号间隔“,”
1.1.34	字符串截取获取前先判断字符串长度（原因：如果BigDecimal格式以0开头，到后台会自动丢掉0，如果不判断长度，直接截取字符串，数据会错误）
